# Part of RedELK
#
# In this file we configure the logstash filtes for Stage 1 teamserver logs
#
# Author: Outflank B.V. / Marc Smeets
#


filter {
  if [infra][log][type] == "rtops" and [c2][program] == "stage1" {

    # since ECS host.name is filled automatically. In case of C2 server logs it should contain the same value as agent.name. Here we check and drop host.name
    if [agent][name] == [host][name] {
      mutate {
        remove_field => [ "[host][name]" ]
      }
    }
    
    # Rules for 'events' from main.log
    if [c2][log][type] == "events" {
      # Get the timestamp from the log line, and get the rest of the log line
      grok {
        match => { "message" => "(?<[c2][timestamp]>%{YEAR}\-%{MONTHNUM}\-%{MONTHDAY} %{HOUR}\:%{MINUTE}\:%{SECOND}) UTC \*\*\* (?<[c2][message]>(.|\r|\n)*)" }
      }
      # Set the timestamp from the log to @timestamp
      date {
        match => [ "[c2][timestamp]", "YYYY-MM-dd HH:mm:ss" ]
        target => "@timestamp"
        timezone => "Etc/UTC"
      }

      # matching remaing lines of 'events'
      mutate {
        replace  => { "[c2][log][type]" => "events_newimplant" }
      }

      # new implant - Starts with INIT or CLIENT_NEW_UID
      # matching lines like: INIT stage1Uid:I9TADD99; targetHostname:DESKTOP-MGEG30S; targetUsername:CONTOSO\ieuser; targetOs:Windows 10.0 (OS Build 17763); targetPid:456; targetProcname:Stage1-Syscall_x64_Release.exe; targetArch:64; stage1Killdate:2020-06-06 12:59:40; targetIp:10.10.201.31; transportIp:192.168.96.6;
      grok {
        match => { "[c2][message]" => "(INIT|CLIENT_NEW_UID) stage1Uid\:(?<[implant][id]>([^;]*)); targetHostname\:(?<[host][name]>([^;]*)); targetUsername\:(?<[user][name]>([^;]*)); targetOs:%{NOTSPACE:[host][os][name]}(?:(%{SPACE}%{NOTSPACE:[host][os][version]} \(OS Build %{NOTSPACE:[host][os][kernel]}\)))?; targetPid:(?<[process][pid]>([^\;]*)); targetProcname:(?<[process][name]>([^\;]*)); targetArch:(?<[implant][arch]>([^\;]*)); stage1Killdate:(?<[implant][kill_date]>([^\;]*)); targetIp:%{IPORHOST:[host][ip_int]}; transportIp:%{IPORHOST:[host][ip_ext]};"}
      }
    }

    # Rules for 'implant' logs
    if [c2][log][type] == "implant" {
      # Get the timestamp from the log line, and get the rest of the log line
      grok {
        match => { "message" => "(?<[c2][timestamp]>%{YEAR}\-%{MONTHNUM}\-%{MONTHDAY} %{HOUR}\:%{MINUTE}\:%{SECOND}) UTC \*\*\* (?<[c2][message]>(.|\r|\n)*)" }
      }
      # Set the timestamp from the log to @timestamp
      date {
        match => [ "[c2][timestamp]", "YYYY-MM-dd HH:mm:ss" ]
        target => "@timestamp"
        timezone => "Etc/UTC"
      }

      # matching lines with 'INIT' = new implants
      if "INIT " in [c2][message] {
        mutate {
          replace  => { "[c2][log][type]" => "implant_newimplant" }
        }

        # new implant - Starts with INIT or CLIENT_NEW_UID
        # matching lines like: INIT stage1Uid:I9TADD99; targetHostname:DESKTOP-MGEG30S; targetUsername:CONTOSO\ieuser; targetOs:Windows 10.0 (OS Build 17763); targetPid:456; targetProcname:Stage1-Syscall_x64_Release.exe; targetArch:64; stage1Killdate:2020-06-06 12:59:40; targetIp:10.10.201.31; transportIp:192.168.96.6;
        grok {
          match => { "[c2][message]" => "(INIT|CLIENT_NEW_UID) stage1Uid\:(?<[implant][id]>([^;]*)); targetHostname\:(?<[host][name]>([^;]*)); targetUsername\:(?<[user][name]>([^;]*)); targetOs:%{NOTSPACE:[host][os][name]}(?:(%{SPACE}%{NOTSPACE:[host][os][version]} \(OS Build %{NOTSPACE:[host][os][kernel]}\)))?; targetPid:(?<[process][pid]>([^\;]*)); targetProcname:(?<[process][name]>([^\;]*)); targetArch:(?<[implant][arch]>([^\;]*)); stage1Killdate:(?<[implant][kill_date]>([^\;]*)); targetIp:%{IPORHOST:[host][ip_int]}; transportIp:%{IPORHOST:[host][ip_ext]};"}
        }

        # Now duplicate fields host.ip_int and host.ip_ext to host.ip to adhere to ECS.
        if [host][ip_int] {
	        mutate {
           add_field  => { "[host][ip]" => "%{[host][ip_int]}" }
	        }
        }
        if [host][ip_ext] {
          mutate {
            add_field => {
              "[host][domain_ext]" => "%{[host][ip_ext]}"
              "[host][ip]" => "%{[host][ip_ext]}"
            }
          }
          # do reverse DNS lookup
          dns {
            reverse => ["[host][domain_ext]"]
            action => "replace"
            timeout => "2.0"
          }
          # add geo ip info from City DB
          geoip {
            source => "[host][ip_ext]"
            target => "tmpgeoip"
          }
          # add geo ip info from ASN DB
          geoip {
            source => "[host][ip_ext]"
            target => "tmpgeoip"
            default_database_type => "ASN"
          }
          mutate {
            copy => {
              "[tmpgeoip][as_org]" => "[host][geo][as][organization][name]"
              "[tmpgeoip][asn]" => "[host][geo][as][organization][number]"
              "[tmpgeoip][city_name]" => "[host][geo][city_name]"
              "[tmpgeoip][country_code2]" => "[host][geo][country_iso_code]"
              "[tmpgeoip][location]" => "[host][geo][location]"
              "[tmpgeoip][region_code]" => "[host][geo][region_iso_code]"
              "[tmpgeoip][region_name]" => "[host][geo][region_name]"
            }
            remove_field => [ "tmpgeoip" ]
          }
        }

        # now duplicate this specific log line, remove some irrelevant fields and make it ready to store in the ImplantsDB index (different output)
        clone {
          clones => [ "implantsdb" ]
          remove_field => [ "[c2][log][type]","[c2][message]","[infra][log][type]" ]
        }
      }

      # matching lines with 'TASKDISTRIBUTED' = new implants
      if "TASKDISTRIBUTED " in [c2][message] {
        mutate {
          replace  => { "[c2][log][type]" => "implant_task" }
        }

        # matching lines like: TASKDISTRIBUTED stage1Uid:ZPO0VW0W; taskUid:LDCG4JL38W; taskRequest:getpersistkey; taskRequestparameters:OneDrive;
        grok {
          match => { "[c2][message]" => "TASKDISTRIBUTED stage1Uid\:(?<[implant][id]>([^;]*)); taskUid\:(?<[implant][task_id]>([^;]*)); (taskOperator\:(?<[c2][operator]>([^;]*)); )?taskRequest\:(?<[implant][task]>([^;]*)); taskRequestparameters\:(?<[implant][task_parameters]>([^;]*));"}
        }
      }

      # matching lines with 'TASKRESPONSE' = new implants
      if "TASKRESPONSE " in [c2][message] {
        mutate {
          replace  => { "[c2][log][type]" => "implant_output" }
        }

        # matching lines like: TASKRESPONSE stage1Uid:LA1JSTG3; taskUid:ITXHK99Z19; taskRequest:pwd; taskRequestparameters:; taskResponse:C:\Users\ieuser\Desktop; 
        grok {
          match => { "[c2][message]" => "TASKRESPONSE stage1Uid\:(?<[implant][id]>([^;]*)); taskUid\:(?<[implant][task_id]>([^;]*)); (taskOperator\:(?<[c2][operator]>([^;]*)); )?taskRequest\:(?<[implant][task]>([^;]*)); taskRequestparameters\:(?<[implant][task_parameters]>([^;]*)); taskResponse\:(?<[implant][output]>(.|\r|\n)*);"}
        }

        # Check if if there was a file downloaded
        if "taskResponse: Downloaded " in [c2][message] {
          clone {
            clones => ["downloads"]
          }
          
          if "downloads" in [type] {
            # clean up the fields - remove type and c2logtype, and add c2logtype as downloads
            mutate {
              remove_field => ["type", "[c2][log][type]"]
            }
            mutate {
              add_field => { "[c2][log][type]" => "downloads" }
            }
        
            # Matching lines like: Downloaded C:\Users\ieuser.CONTOSO\Desktop\Stage1-Syscall_x64_Release.exe 305 kb [1592230528_125IJU9I] Stage1-Syscall_x64_Release.exe;
            grok {
              match => { "[implant][output]" => " Downloaded %{PATH:[file][directory]}\\(?<[file][name]>([^\;]*)) %{INT} (kb|mb|b|gb) \[(?<[file][directory_local]>([^\]]*))] %{GREEDYDATA}" }
            } 

            # Add path/URI value to the full implant.log file
            ruby {
              path => "/usr/share/logstash/redelk-main/scripts/outflankstage1_makedownloadspath.rb"
            }
          } 
        }
      }

      # Add path/URI value to the full implant.log file
      ruby {
        path => "/usr/share/logstash/redelk-main/scripts/outflankstage1_makelogpath.rb"
      }

    }
  }
}