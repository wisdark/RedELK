# Part of RedELK
#
# In this file we configure the logstash filtes for CobaltStrike teamserver logs
#
# Author: Outflank B.V. / Marc Smeets
#

filter {
  if [cslogtype] == "events" {
    # Get the timestamp from the log line, and get the rest of the log line
    # Since CS version 3.14 the logging changed to include the UTC keyword
    if " UTC " not in [message] {  # check for legacy CS version, will be removed in the future
      grok {
        match => { "message" => "(?<cstimestamp>%{MONTHNUM}\/%{MONTHDAY} %{HOUR}\:%{MINUTE}) %{GREEDYDATA:csmessage}" }
      }
      # Set the timestamp from the log to @timestamp
      date {
        match => [ "cstimestamp", "MM/dd HH:mm" ]
        target => "@timestamp"
        timezone => "Etc/UTC"
      }
    } else {  # check for newer version of CS, contains "UTC" in time logging lines
      grok {
        match => { "message" => "(?<cstimestamp>%{MONTHNUM}\/%{MONTHDAY} %{HOUR}\:%{MINUTE}\:%{SECOND}) UTC %{GREEDYDATA:csmessage}" }
      }
      # Set the timestamp from the log to @timestamp
      date {
        match => [ "cstimestamp", "MM/dd HH:mm:ss" ]
        target => "@timestamp"
        timezone => "Etc/UTC"
      }
    } # end of legacy CS version check

    # matching lines like: *** initial beacon from username@ip (hostname)
    if " initial beacon from " in [csmessage] {
      mutate {
        replace  => { "cslogtype" => "events_newbeacon" }
      }

      grok {
        match => { "csmessage" => "((/*** initial beacon from)) (?<target_user>([^@]*))\@%{IPORHOST:target_ipint} \((?<target_hostname>([^)]*))" }
      }
    }

    # matching lines like: *** user joined
    if " joined" in [csmessage] or " quit" in [csmessage] {
      mutate {
        replace  => { "cslogtype" => "events_joinleave" }
      }
    }
  }

  if [cslogtype] == "beacon" {
    # Get the timestamp from the log line, and get the rest of the log line
    # Since CS version 3.14 the logging changed to include the UTC keyword
    if " UTC " not in [message] {  # check for legacy CS version, will be removed in the future
      grok {
        match => { "message" => "(?<cstimestamp>%{MONTHNUM}\/%{MONTHDAY} %{TIME}) %{GREEDYDATA:csmessage}" }
      }
      # Set the timestamp from the log to @timestamp
      date {
        match => [ "cstimestamp", "MM/dd HH:mm" ]
        target => "@timestamp"
        timezone => "Etc/UTC"
      }
    } else {  # check for newer version of CS, contains "UTC" in time logging lines
      grok {
        match => { "message" => "(?<cstimestamp>%{MONTHNUM}\/%{MONTHDAY} %{TIME}) UTC %{GREEDYDATA:csmessage}" }
      }
      # Set the timestamp from the log to @timestamp
      date {
        match => [ "cstimestamp", "MM/dd HH:mm:ss" ]
        target => "@timestamp"
        timezone => "Etc/UTC"
      }
    } # end of legacy CS version check

    # Add path/URI value to the full beacon.log file
    ruby {
      path => "/etc/logstash/ruby-scripts/makebeaconlogpath.rb"
    }

    # Set the beacon id from the file name
    # Need to match for 2 different occurence, one where the IP address is known based on the file name, and one where it states 'unknown'.
    # It is expected that the logs are in the default subdirectory of the folder cobaltstrike: /cobaltstrike/logs/
    grok {
      match => { "source" => [ "/cobaltstrike/logs/((\d{6}))/%{IPORHOST:target_ipint}/beacon_(?<beacon_id>(\d{1,5}))", "/cobaltstrike/logs/((\d{6}))/unknown/beacon_(?<beacon_id>(\d{0,5}))" ] }
    }

    # matching lines like: [metadata] 1.2.3.4 <- 10.10.10.10; computer: SomeComputername; user: SomeUsername; pid: 7368; os: Windows; version: 6.1; beacon arch: x86
    # todo: this could go wrong if targetip is not an ip but a smb/TCP beacon (can list the beacon session id instead of ip address..? In such case also set the beacon_link value to true
    if "[metadata] " in [csmessage] {
      mutate {
        replace  => { "cslogtype" => "beacon_newbeacon" }
      }
      # need to match 2 types of lines, one for regular HTTP(S) beacon where the ext IP field is an IP, and one for SMB/TCP beacons where the ext IP field is a field like "beacon_12345"
      grok {
        match => { "csmessage" => [ "(([^\s]*)) %{IPORHOST:target_ipext} (([^\s]*)) %{IPORHOST}((\; computer:)) (?<target_hostname>([^\;]*))((\; user:)) (?<target_user>([^\;]*))((\; pid:)) (?<target_pid>([^\;]*))((\; os:)) (?<target_os>([^\;]*))((\; version:)) (?<target_osversion>([^\;]*))((\; beacon arch:)) (?<beacon_arch>([^\;]*))","(([^\s]*)) ((beacon_))(?<beacon_linkparentid>(\d{1,5})) (([^\s]*)) %{IPORHOST}((\; computer:)) (?<target_hostname>([^\;]*))((\; user:)) (?<target_user>([^\;]*))((\; pid:)) (?<target_pid>([^\;]*))((\; os:)) (?<target_os>([^\;]*))((\; version:)) (?<target_osversion>([^\;]*))((\; beacon arch:)) (?<beacon_arch>([^\;]*))" ] }
      }

      # now duplicate this specific log line, remove some irrelevant fields and make it ready to store in the beaconDB index (different output)
      clone {
        clones => [ "beacondb" ]
        #remove_field => [ "cstimestamp","[beat][hostname]","[beat][name]","[beat][version]","beat","cslogtype","csmessage","host","infralogtype","[prospector][type]" ]
        remove_field => [ "cslogtype","csmessage","host","infralogtype" ]
      }
      # Now set beacon link information if its a linked beacon.
      if [beacon_linkparentid] {
          mutate {
            add_field => { "beacon_linked" => "true" }
            add_field => { "beacon_linkmode" => "child" }
          }
      }

    }

    # matching lines like: [task] Tasked beacon to sleep for 3600s (20% jitter)
    if "[task] " in [csmessage] {
      mutate {
        replace  => { "cslogtype" => "beacon_task" }
      }
 
      grok {
        match => { "csmessage" => "(([^\s]*)) %{GREEDYDATA:beacon_task}" }
      }

      # Since Cobalt Strike v3.14 the task log line contains MITRE ATT&CK numbers of the task that is about to be performed. 
      # Example: [task] <T1113, T1093> Tasked beacon to take screenshot
      # Here we check if '<T' and '>' are in csmessage. If so, we parse the field. If not, we assume its an old CS version and skip the creation of the ATT&CKTechnique field.
      # We also check if there are multiple values, and if so split them up
      if "<T" in [beacon_task] and ">" in [beacon_task] {
        grok {
          match => { "beacon_task" => "<(?<attack_technique>([^\>]*))> " }
        }
        mutate {
          split => { "attack_technique" => ", " }
        }
      }
    }

    # matching lines like: [checkin] host called home, sent: 16 bytes
    if "[checkin] " in [csmessage] {
      mutate {
        replace  => { "cslogtype" => "beacon_checkin" }
      }

      grok {
        match => { "csmessage" => "(([^\s]*)) %{GREEDYDATA:beacon_checkin}" }
      }
    }

    # matching lines like: [input] <Operator> note s3600 20
    if "[input] " in [csmessage] {
      mutate {
        replace  => { "cslogtype" => "beacon_input" }
      }

      grok {
        match => { "csmessage" => "(([^\s]*)) %{GREEDYDATA:beacon_input}" }
      }
    }

    # matching lines like: [indicator] SomethingSomething
    if "[indicator]" in [csmessage] {
      mutate {
        replace => { "cslogtype" => "ioc" }
      }

      # need to match 2 types of lines: one for file and one for service indicators
      grok {
        match => { "csmessage" => [ "((^\[indicator\])) (?<ioc_type>([^\:]*))((:)) %{NOTSPACE:ioc_hash} %{POSINT:ioc_bytesize} ((bytes)) %{GREEDYDATA:ioc_name}","((^\[indicator\])) (?<ioc_type>([^\:]*))((:)) %{WINPATH:ioc_path} %{NOTSPACE:ioc_name}" ] }
      }
    }

    # matching lines like: [output]\nSomethingSomething
    if "[output]" in [csmessage] {
      mutate {
        replace  => { "cslogtype" => "beacon_output" }
      }

      grok {
        match => { "csmessage" => "]\n%{GREEDYDATA:beacon_output}" }
      }

      # check for messages like: established link to parent beacon: 1.2.3.4
      # todo: add check for recursive smb/TCP beacons (child becomes another beacon's parent). For now this parent-child indication is wrong when a child becomes a parent of another linked beacon
      if "established link to parent beacon" in [beacon_output] {
        grok {
          match => { "beacon_output" => "((established link to parent beacon: ))%{IPORHOST:target_linkparentnode}" }
          add_field => { "beacon_linked" => "true" }
          add_field => { "beacon_linkmode" => "child" }
        }
      }
      if "established link to child beacon" in [beacon_output] {
        grok {
          match => { "beacon_output" => "((established link to child beacon: ))%{IPORHOST:target_linkchildnode}" }
          add_field => { "beacon_linked" => "true" }
          add_field => { "beacon_linkmode" => "parent" }
        }
      }

      # check for received screenshots and add a path value to the screenshot
      if "received screenshot (" in [beacon_output] {
        ruby {
          path => "/etc/logstash/ruby-scripts/makescreenshotpath.rb"
        }
      }
    }

    # matching lines like: [error]\nSomethingSomething
    if "[error]" in [csmessage] {
      mutate {
        replace  => { "cslogtype" => "beacon_error" }
      }

      grok {
        match => { "csmessage" => "]%{GREEDYDATA:beacon_output}" }
      }
    }
  }

  if [cslogtype] == "keystrokes" {
    # Get the timestamp from the log line, and get the rest of the log line
    # Since CS version 3.14 the logging changed to include the UTC keyword
    if " UTC " not in [message] {  # check for legacy CS version, will be removed in the future
      grok {
        match => { "message" => "(?<cstimestamp>%{MONTHNUM}\/%{MONTHDAY} %{TIME}) %{GREEDYDATA:csmessage}" }
      }
      # Set the timestamp from the log to @timestamp
      date {
        match => [ "cstimestamp", "MM/dd HH:mm:ss" ]
        target => "@timestamp"
        timezone => "Etc/UTC"
      }
    } else {  # check for newer version of CS, contains "UTC" in time logging lines
      grok {
        match => { "message" => "(?<cstimestamp>%{MONTHNUM}\/%{MONTHDAY} %{TIME}) UTC %{GREEDYDATA:csmessage}" }
      }
      # Set the timestamp from the log to @timestamp
      date {
        match => [ "cstimestamp", "MM/dd HH:mm:ss" ]
        target => "@timestamp"
        timezone => "Etc/UTC"
      }
    }

    # Set the beacon id from the file name
    # Need to match for 2 different occurence, one where the IP address is known based on the file name, and one where it states 'unknown'.
    # It is expected that the logs are in the default subdirectory of the folder cobaltstrike: /cobaltstrike/logs/
    grok {
      match => { "source" => [ "/cobaltstrike/logs/((\d{6}))/%{IPORHOST:target_ipint}/keystrokes/keystrokes_(?<beacon_id>(\d{1,5}))", "/cobaltstrike/logs/((\d{6}))/unknown/keystrokes/keystrokes_(?<beacon_id>(\d{0,5}))" ] }
    }

    # add url to full keystrokes file
    ruby {
      path => "/etc/logstash/ruby-scripts/makekeystrokespath.rb"
    }
  }

  if [cslogtype] == "downloads" {
    if " UTC " not in [message] {  # check for legacy CS version, will be removed in the future
      # Matching lines like: #1546505606424    10.202.1.11    12654    7    /root/cobaltstrike/downloads/9ce6fbfb1    testdoc.txt    C:\Users\Administrator\Desktop\
      grok {
        # This type of log does not have a regular timestamp, but it does have a large int at the beginning. Lets throw that away as we have no use for it now.
        match => { "message" => "%{WORD}(\t)%{GREEDYDATA:csmessage}" }
      }
      grok {
        match => { "csmessage" => "%{IP:target_ipint}(\t)(?<beacon_id>(\d{0,5}))(\t)%{INT}(\t)%{NOTSPACE:pathlocal}(\t)(?<filename>([^\t]*))(\t)%{GREEDYDATA:pathremote}" }
      }
    } else {  # check for newer version of CS, contains "UTC" in time logging lines
      # matching lines like: 05/25 13:29:44 UTC      192.168.217.131 93439   70      /root/cobaltstrike/downloads/2914cdfa8  helloworld.ps1  C:\users\marcs\Desktop\
      grok {
        match => { "message" => "(?<cstimestamp>%{MONTHNUM}\/%{MONTHDAY} %{HOUR}\:%{MINUTE}\:%{SECOND}) UTC(\t)%{GREEDYDATA:csmessage}" }
      }
      grok {
        match => { "csmessage" => "%{IP:target_ipint}(\t)(?<beacon_id>(\d{0,5}))(\t)%{INT}(\t)%{NOTSPACE:pathlocal}(\t)(?<filename>([^\t]*))(\t)%{GREEDYDATA:pathremote}" }
      }        
      # Set the timestamp from the log to @timestamp
      date {
        match => [ "cstimestamp", "MM/dd HH:mm:ss" ]
        target => "@timestamp"
        timezone => "Etc/UTC"
      }
    } # end of legacy CS version check
      
    # add url to full keystrokes file
    ruby {
      path => "/etc/logstash/ruby-scripts/makedownloadspath.rb"
    }
  }
}

