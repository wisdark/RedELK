# Part of RedELK
#
# In this file we configure the logstash filtes for HAproxy logs
#
# Author: Outflank B.V. / Marc Smeets
#

filter {
  if [infralogtype] == "redirtraffic" and [redirprogram] == "haproxy" {

    # Filebeat introduces the source field for the name of the log file path. But this collides with source object from the Elastic Common Schema.
    # We have no need for the filebeat's field as its also stored in log.file.path. So we drop it.
    mutate {
      remove_field => [ "source" ]
    }

    # drop haproxy log lines about the service starting and stopping
    if "haproxy-systemd-wrapper" in [message] {
      drop { }
    }
    if "Proxy " in [message] and " started." in [message] {
      drop { }
    }
    # drop haproxy log lines when there is a config error
    if " [ALERT] " in [message] {
       drop { }
    }
    if " [ SSL] " in [message] {
       drop { }
    }
    if " [ ALL] " in [message] {
       drop { }
    }
    if " [UNIX] " in [message] {
       drop { }
    }
    if " [STAT] " in [message] {
       drop { }
    }
    if " [ TCP] " in [message] {
       drop { }
    }
    if " [WARNING] " in [message] {
       drop { }
    }

    # Let's first trim the syslog info from the log line
    grok {
      match => { "message" => ["%{SYSLOGTIMESTAMP:syslogtimestamp} %{NOTSPACE:sysloghostname} %{PROG:syslogprogram}(?:\[%{POSINT:syslogpid}\])?: %{GREEDYDATA:messagenosyslog}"] }
    }


    # Sometimes HAproxy will report an SSL handshake failure, using a different log line. We check for that as well
    if "SSL handshake failure" in [message] {
      grok {
        match => { "messagenosyslog"=> [ "%{IPORHOST:redirtraffic.sourceip}:%{POSINT:redirtraffic.sourceport} \[(?<redirtraffic.timestamp>%{MONTHDAY}\/%{MONTH}\/%{YEAR}:%{TIME})\] (?<redir.frontendname>([^/]*))%{GREEDYDATA:redirtraffic.httprequest}" ] }
      }
      mutate {
        add_field => { "redir.backendname" => "ssl-error" }
      }
      # Set the timestamp from the log to @timestamp, example: 16/Sep/2018:07:08:21.783
      date {
        match => [ "redirtraffic.timestamp", "dd/MMM/yyyy:HH:mm:ss.SSS" ]
        target => "@timestamp"
        timezone => "Etc/UTC"
      }
    }

    # now matching the real haproxy lines. We have several log line formats we need to match:
    # - Lines without X-Forwarded-For identified with "xforwardedfor:-"
    # - Lines with X-Forwarded-For set, identified with "xforwardedfor:$SOMEIP"
    # - any other weird sitution, i.e. cutoff lines when the log lne is larger than the redir's logbuffer size
    # Sometimes HAProxy reports lines with 'message repeated X times' in it. This is inserted into the line after the SYSLOGPROG, before "frontend. So we grok match (%{GREEDYDATA})? in each line
    #
    # We'll walk through them one by one
    #

    if "xforwardedfor:-" in [message] {
      # Lines without X-Forwarded-For identified with "xforwardedfor:-"
      grok {
        match => { "messagenosyslog" => [ "GMT:%{HTTPDATE:redirtraffic.timestamp} frontend:(?<redir.frontendname>([^/]*))/(([^/]*))/%{IPORHOST:redir.frontendip}:%{POSINT:redir.frontendport} backend:%{NOTSPACE:redir.backendname} client:%{IPORHOST:redirtraffic.sourceip}:%{POSINT:redirtraffic.sourceport} xforwardedfor:- headers:\{\|(?<redirtraffic.headersall>([^\}]*))} statuscode:%{INT:redirtraffic.httpstatus} request:%{GREEDYDATA:redirtraffic.httprequest}" ] }
      }
    } else if "request:" in [message] {
    # Lines with X-Forwarded-For set. We already filtered out the 'xfordwardedfor:-', so anything left with a large enough log line should be good 
      grok {
        match => { "messagenosyslog" => [ "GMT:%{HTTPDATE:redirtraffic.timestamp} frontend:(?<redir.frontendname>([^/]*))/(([^/]*))/%{IPORHOST:redir.frontendip}:%{POSINT:redir.frontendport} backend:%{NOTSPACE:redir.backendname} client:%{IPORHOST:redirtraffic.sourceipcdn}:%{POSINT:redirtraffic.sourceportcdn} xforwardedfor:%{IPORHOST:redirtraffic.sourceip} headers:\{\|(?<redirtraffic.headersall>([^\}]*))} statuscode:%{INT:redirtraffic.httpstatus} request:%{GREEDYDATA:redirtraffic.httprequest}" ] }
        add_tag => [ "redirtrafficxforwardedfor" ]
      }
    } else {
    # catchall situation, i.e. cutoff lines when the log lne is larger than the redir's logbuffer size
      grok {
        match => { "messagenosyslog" => [ "GMT:%{HTTPDATE:redirtraffic.timestamp} frontend:(?<redir.frontendname>([^/]*))/(([^/]*))/%{IPORHOST:redir.frontendip}:%{POSINT:redir.frontendport} backend:%{NOTSPACE:redir.backendname} %{GREEDYDATA:redirtraffic.catchall}" ] }
        add_tag => [ "redirlongmessagecatchall" ]
      }
    }

    if [messagenosyslog] {
      mutate {
        remove_field => [ "messagenosyslog" ]
      }
    }

    # map header values onto dedicated fields and split the values of the headersall field into an array
    if [redirtraffic.headersall] {
      # map to dedicated fields
      grok {
        match => { "redirtraffic.headersall" => [ "(?<redirtraffic.headeruseragent>([^|]*))\|(?<redirtraffic.headerhost>([^|]*))\|(?<redirtraffic.headerxforwardedfor>([^|]*))\|(?<redirtraffic.headerxforwardedproto>([^|]*))\|(?<redirtraffic.headerxhost>([^|]*))\|(?<redirtraffic.headerforwarded>([^|]*))\|(?<redirtraffic.headervia>([^|]*))" ] }
      }
      
      # split the values into an array
      mutate {
        split => { "redirtraffic.headersall" => "|" }
      }
    }
    
    # Set the timestamp from the log to @timestamp, example: 15/Apr/2018:19:22:31 +0000
    date {
      match => [ "redirtraffic.timestamp", "dd/MMM/yyyy:HH:mm:ss Z" ]
      target => "@timestamp"
      timezone => "Etc/UTC"
    }

    # When IPv6 is enabled on your HAProxy host, IPV4 addresses are reported like ::ffff:ipv4address. Here we cut off the ::ffff: part
    if "ffff" in [redirtraffic.sourceip] {
      mutate {
        gsub => [
          "redirtraffic.sourceip", "\:\:ffff\:", ""
        ]
      }
    }
    if "ffff" in [destination.ip] {
      mutate {
        gsub => [
          "destination.ip", "\:\:ffff\:", ""
        ]
      }
    }
    if "ffff" in [redirtraffic.sourceipcdn] {
      mutate {
        gsub => [
          "redirtraffic.sourceipcdn", "\:\:ffff\:", ""
        ]
      }
    }
    if "ffff" in [redir.frontendip] {
      mutate {
        gsub => [
          "redir.frontendip", "\:\:ffff\:", ""
        ]
      }
    }

    # Add data to the redirraffic.sourceip
    if [redirtraffic.sourceip] {
      # duplicate field so we can replace it with reverse DNS lookup
      mutate {
        add_field => { "redirtraffic.sourcedns" => "%{redirtraffic.sourceip}" }
      }
      # do reverse DNS lookup
      dns {
        reverse => ["redirtraffic.sourcedns"]
        action => "replace"
        timeout => "2.0"
      }
      # add geo ip info from City DB
      geoip {
        source => "redirtraffic.sourceip"
      }
      # add geo ip info from ASN DB
      geoip { 
        source => "redirtraffic.sourceip"
        default_database_type => "ASN"
        database => "/usr/share/logstash/GeoLite2-dbs/GeoLite2-ASN.mmdb"
      }
    }
    # Add data to the redirtraffic.sourceipcdn
    if [redirtraffic.sourceipcdn] {
      # duplicate field so we can replace it with reverse DNS lookup
      mutate {
        add_field => { "redirtraffic.sourcednscdn" => "%{redirtraffic.sourceipcdn}" }
      }
      # do reverse DNS lookup
      dns {
        reverse => ["redirtraffic.sourcednscdn"]
        action => "replace"
        timeout => "2.0"
      }
      # add geo ip info from City DB
      geoip {
        source => "redirtraffic.sourceipcdn"
      }
      # add geo ip info from ASN DB
      geoip { 
        source => "redirtraffic.sourceipcdn"
        default_database_type => "ASN"
        database => "/usr/share/logstash/GeoLite2-dbs/GeoLite2-ASN.mmdb"
      }
    }
  }
}
